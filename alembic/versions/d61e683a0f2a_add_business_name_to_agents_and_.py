"""Add business_name to agents and calendar fields to events

Revision ID: d61e683a0f2a
Revises: efc8c99a114f
Create Date: 2025-09-26 16:50:43.537140

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'd61e683a0f2a'
down_revision: Union[str, Sequence[str], None] = 'efc8c99a114f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('events',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('calendar_id', sa.String(), nullable=False),
    sa.Column('agent_id', sa.String(), nullable=False),
    sa.Column('summary', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=False),
    sa.Column('timezone', sa.String(), nullable=False),
    sa.Column('attendees', sa.JSON(), nullable=True),
    sa.Column('created_by', sa.String(), nullable=True),
    sa.Column('google_event_id', sa.String(), nullable=True),
    sa.Column('cancelled_at', sa.DateTime(), nullable=True),
    sa.Column('cancellation_reason', sa.String(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_events_agent_id'), 'events', ['agent_id'], unique=False)
    op.create_index(op.f('ix_events_calendar_id'), 'events', ['calendar_id'], unique=False)
    op.drop_index(op.f('ix_collections_agent_id'), table_name='collections')
    op.drop_index(op.f('ix_collections_name'), table_name='collections')
    op.drop_table('collections')
    op.drop_table('boards')

    # Add business_name column as nullable first
    op.add_column('agents', sa.Column('business_name', sa.String(), nullable=True))

    # Update existing agents to have a default business_name based on their name
    op.execute("UPDATE agents SET business_name = name WHERE business_name IS NULL")

    # Now make it NOT NULL
    op.alter_column('agents', 'business_name', nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('agents', 'business_name')
    op.create_table('boards',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('agent_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('lanes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('labels', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], name=op.f('boards_agent_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('boards_pkey')),
    sa.UniqueConstraint('agent_id', name=op.f('boards_agent_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('collections',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('agent_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('display_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('file_type', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('content_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('chunk_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('chroma_collection_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], name=op.f('collections_agent_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('collections_pkey'))
    )
    op.create_index(op.f('ix_collections_name'), 'collections', ['name'], unique=False)
    op.create_index(op.f('ix_collections_agent_id'), 'collections', ['agent_id'], unique=False)
    op.drop_index(op.f('ix_events_calendar_id'), table_name='events')
    op.drop_index(op.f('ix_events_agent_id'), table_name='events')
    op.drop_table('events')
    # ### end Alembic commands ###
